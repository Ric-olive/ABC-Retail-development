@model List<ABC_Retail.Models.Product>

<!-- Hero Section -->
<div class="hero-section" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 4rem 0; margin-bottom: 3rem;">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-8">
                <h1 class="display-4 fw-bold mb-3" style="font-family: 'Inter', sans-serif;">Discover Amazing Products</h1>
                <p class="lead mb-4" style="opacity: 0.9;">Find everything you need with fast shipping and great prices</p>
                <div class="d-flex gap-3">
                    <span class="badge bg-light text-dark px-3 py-2" style="font-size: 0.9rem;">
                        <i class="bi bi-truck me-1"></i>Free Shipping
                    </span>
                    <span class="badge bg-light text-dark px-3 py-2" style="font-size: 0.9rem;">
                        <i class="bi bi-shield-check me-1"></i>Secure Payment
                    </span>
                    <span class="badge bg-light text-dark px-3 py-2" style="font-size: 0.9rem;">
                        <i class="bi bi-arrow-clockwise me-1"></i>Easy Returns
                    </span>
                </div>
            </div>
            <div class="col-lg-4 text-center">
                <i class="bi bi-bag-heart" style="font-size: 8rem; opacity: 0.3;"></i>
            </div>
        </div>
    </div>
</div>

<!-- Filter and Sort Section -->
<div class="container mb-4">
    <div class="row align-items-center">
        <div class="col-md-6">
            <h2 class="h4 mb-0" style="font-family: 'Inter', sans-serif; font-weight: 600;">
                All Products <span class="text-muted">(@Model.Count items)</span>
            </h2>
        </div>
        <div class="col-md-6">
            <div class="d-flex gap-3 justify-content-md-end">
                <select class="form-select form-select-sm" style="width: auto;">
                    <option>Sort by: Featured</option>
                    <option>Price: Low to High</option>
                    <option>Price: High to Low</option>
                    <option>Customer Reviews</option>
                </select>
                <select class="form-select form-select-sm" style="width: auto;">
                    <option>All Categories</option>
                    <option>Electronics</option>
                    <option>Fashion</option>
                    <option>Home & Garden</option>
                </select>
            </div>
        </div>
    </div>
</div>

@if (Model.Count == 0)
{
    <div class="container">
        <div class="text-center py-5">
            <i class="bi bi-box-seam" style="font-size: 4rem; color: #dee2e6;"></i>
            <h3 class="mt-3 text-muted">No products available</h3>
            <p class="text-muted">Check back later for new arrivals!</p>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="row g-4">
            @foreach (var product in Model)
            {
                <div class="col-lg-3 col-md-4 col-sm-6">
                    <div class="product-card h-100" style="border: 1px solid #e9ecef; border-radius: 12px; overflow: hidden; transition: all 0.3s ease; background: white;">
                        <!-- Product Image -->
                        <div class="product-image-container" style="position: relative; height: 250px; overflow: hidden; background: #f8f9fa;">
                            @if (!string.IsNullOrWhiteSpace(product.ImageUrl))
                            {
                                <img src="@product.ImageUrl" alt="@product.Name" class="product-image" 
                                     style="width: 100%; height: 100%; object-fit: cover; transition: transform 0.3s ease;" />
                            }
                            else
                            {
                                <div class="d-flex align-items-center justify-content-center h-100" style="background: linear-gradient(45deg, #f8f9fa, #e9ecef);">
                                    <i class="bi bi-image" style="font-size: 3rem; color: #6c757d;"></i>
                                </div>
                            }
                            
                            <!-- Stock Badge -->
                            @if (product.StockQty <= 0)
                            {
                                <div class="position-absolute top-0 start-0 m-2">
                                    <span class="badge bg-danger">Out of Stock</span>
                                </div>
                            }
                            else if (product.StockQty <= 5)
                            {
                                <div class="position-absolute top-0 start-0 m-2">
                                    <span class="badge bg-warning text-dark">Low Stock</span>
                                </div>
                            }

                            <!-- Quick Actions -->
                            <div class="position-absolute top-0 end-0 m-2 d-flex flex-column gap-2 quick-actions" style="opacity: 0; transition: opacity 0.3s ease;">
                                <button class="btn btn-light btn-sm rounded-circle" style="width: 36px; height: 36px;" title="Add to Wishlist">
                                    <i class="bi bi-heart"></i>
                                </button>
                                <button class="btn btn-light btn-sm rounded-circle" style="width: 36px; height: 36px;" title="Quick View">
                                    <i class="bi bi-eye"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Product Info -->
                        <div class="p-3">
                            <!-- Category -->
                            <div class="mb-2">
                                <span class="badge bg-light text-dark" style="font-size: 0.75rem;">@product.Category</span>
                            </div>

                            <!-- Product Name -->
                            <h5 class="product-title mb-2" style="font-family: 'Inter', sans-serif; font-weight: 600; font-size: 1rem; line-height: 1.3; height: 2.6rem; overflow: hidden;">
                                @product.Name
                            </h5>

                            <!-- Rating (Mock) -->
                            <div class="mb-2">
                                <div class="d-flex align-items-center gap-1">
                                    @for (int i = 0; i < 5; i++)
                                    {
                                        <i class="bi bi-star-fill text-warning" style="font-size: 0.8rem;"></i>
                                    }
                                    <small class="text-muted ms-1">(4.5) 127 reviews</small>
                                </div>
                            </div>

                            <!-- Description -->
                            <p class="text-muted mb-3" style="font-size: 0.85rem; line-height: 1.4; height: 2.8rem; overflow: hidden;">
                                @product.Description
                            </p>

                            <!-- Price and Stock -->
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <div>
                                    <span class="h5 mb-0 text-primary fw-bold" style="font-family: 'Inter', sans-serif;">
                                        @product.Price.ToString("C")
                                    </span>
                                    <br>
                                    <small class="text-muted">@product.StockQty in stock</small>
                                </div>
                                <div class="text-end">
                                    @if (product.StockQty > 0)
                                    {
                                        <span class="badge bg-success-subtle text-success">
                                            <i class="bi bi-check-circle me-1"></i>Available
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger-subtle text-danger">
                                            <i class="bi bi-x-circle me-1"></i>Unavailable
                                        </span>
                                    }
                                </div>
                            </div>

                            <!-- Action Buttons -->
                            <div class="d-grid gap-2">
                                <form asp-controller="CustomerCart" asp-action="AddToCart" method="post" class="add-to-cart-form">
                                    <input type="hidden" name="ProductId" value="@product.RowKey" />
                                    <input type="hidden" name="ProductName" value="@product.Name" />
                                    <input type="hidden" name="Price" value="@product.Price" />
                                    <input type="hidden" name="Quantity" value="1" />
                                    <button type="submit" class="btn btn-primary w-100 add-to-cart-btn" 
                                            @(product.StockQty > 0 ? "" : "disabled")
                                            style="font-family: 'Inter', sans-serif; font-weight: 600; border-radius: 8px; padding: 0.75rem;">
                                        @if (product.StockQty > 0)
                                        {
                                            <i class="bi bi-cart-plus me-2"></i><span>Add to Cart</span>
                                        }
                                        else
                                        {
                                            <i class="bi bi-x-circle me-2"></i><span>Out of Stock</span>
                                        }
                                    </button>
                                </form>
                                
                                <!-- Admin Actions (if needed) -->
                                @if (Context.Session.GetString("AdminEmail") != null)
                                {
                                    <div class="btn-group mt-2" role="group">
                                        <a asp-action="Edit" asp-route-rowKey="@product.RowKey" class="btn btn-outline-secondary btn-sm">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <form asp-action="Delete" method="post" style="display:inline">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="rowKey" value="@product.RowKey" />
                                            <button type="submit" class="btn btn-outline-danger btn-sm"
                                                    onclick="return confirm('Are you sure you want to delete @product.Name?')">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </form>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@section Scripts {
    <style>
        /* Product Card Hover Effects */
        .product-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 12px 24px rgba(0,0,0,0.15) !important;
        }

        .product-card:hover .product-image {
            transform: scale(1.05);
        }

        .product-card:hover .quick-actions {
            opacity: 1 !important;
        }

        /* Add to Cart Button Effects */
        .add-to-cart-btn {
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .add-to-cart-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(13, 110, 253, 0.3);
        }

        .add-to-cart-btn:active:not(:disabled) {
            transform: translateY(0);
        }

        /* Loading animation for add to cart */
        .add-to-cart-btn.loading {
            pointer-events: none;
        }

        .add-to-cart-btn.loading span {
            opacity: 0;
        }

        .add-to-cart-btn.loading::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 20px;
            height: 20px;
            border: 2px solid transparent;
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: translate(-50%, -50%) rotate(0deg); }
            100% { transform: translate(-50%, -50%) rotate(360deg); }
        }

        /* Hero section animations */
        .hero-section {
            animation: fadeInUp 0.8s ease-out;
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Product cards stagger animation */
        .product-card {
            animation: fadeInUp 0.6s ease-out forwards;
            opacity: 0;
        }

        .product-card:nth-child(1) { animation-delay: 0.1s; }
        .product-card:nth-child(2) { animation-delay: 0.2s; }
        .product-card:nth-child(3) { animation-delay: 0.3s; }
        .product-card:nth-child(4) { animation-delay: 0.4s; }
        .product-card:nth-child(5) { animation-delay: 0.5s; }
        .product-card:nth-child(6) { animation-delay: 0.6s; }
        .product-card:nth-child(7) { animation-delay: 0.7s; }
        .product-card:nth-child(8) { animation-delay: 0.8s; }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Handle Add to Cart forms with AJAX and notifications
            const addToCartForms = document.querySelectorAll('.add-to-cart-form');
            
            addToCartForms.forEach(form => {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const button = form.querySelector('.add-to-cart-btn');
                    const productName = form.querySelector('input[name="ProductName"]').value;
                    
                    // Add loading state
                    button.classList.add('loading');
                    
                    // Create FormData
                    const formData = new FormData(form);
                    
                    // Submit via fetch
                    fetch(form.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        }
                    })
                    .then(response => {
                        if (response.ok) {
                            // Success - show notification
                            showCartNotification(`"${productName}" added to cart!`, 'success');
                            
                            // Update cart count (you'll need to implement this based on your cart logic)
                            updateCartCountFromServer();
                            
                            // Change button temporarily
                            const originalContent = button.innerHTML;
                            button.innerHTML = '<i class="bi bi-check-circle me-2"></i>Added!';
                            button.classList.remove('btn-primary');
                            button.classList.add('btn-success');
                            
                            setTimeout(() => {
                                button.innerHTML = originalContent;
                                button.classList.remove('btn-success');
                                button.classList.add('btn-primary');
                            }, 2000);
                        } else {
                            throw new Error('Failed to add to cart');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showCartNotification('Failed to add item to cart. Please try again.', 'error');
                    })
                    .finally(() => {
                        // Remove loading state
                        button.classList.remove('loading');
                    });
                });
            });

            // Function to update cart count from server
            function updateCartCountFromServer() {
                fetch('/api/cart/count', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.count !== undefined) {
                        updateCartCount(data.count);
                    }
                })
                .catch(error => {
                    console.log('Could not update cart count:', error);
                    // Fallback: increment current count
                    const currentBadge = document.querySelector('.cart-badge');
                    if (currentBadge) {
                        const currentCount = parseInt(currentBadge.textContent) || 0;
                        updateCartCount(currentCount + 1);
                    } else {
                        updateCartCount(1);
                    }
                });
            }

            // Quick action buttons
            document.querySelectorAll('.quick-actions button').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    const action = this.getAttribute('title');
                    showCartNotification(`${action} feature coming soon!`, 'info');
                });
            });
        });
    </script>
}
